#+OPTIONS: ^:nil
#+OPTIONS: \n:t

* client
** 脚本目录架构
   Scripts
   -- /Define           公共定义
   -- -- GameRunTimeData.cs  保存了运行时候需要的数据, 比如UserInfo就是其的成员变量
   -- -- GlobalConst.cs  保存了游戏中的常量
   -- /Model            模块
   -- /Net              网络
   -- -- /NetLogic      网络具体事务处理
   -- -- /NetSocket     网络底层服务
   -- /UI
   -- -- /Surfaces
   -- -- /Login
   -- -- -- LoginTransfer.cs ui界面的总控制类， 其底下一般是各种btn的点击函数
   -- -- -- BtnClick_Logon_Account.cs  账号登录按钮的 响应函数
   -- /Utility        实用脚本， 可以理解为与系统相关的脚本
   -- GameApp.cs      Compontes目录下所有类的 管理类

** 断线重连
   表1: socket断开,  socket重新连接后, 需要完成的事情:
   | socket 服务器 | 需求                                          | 备注                                    |
   |---------------+-----------------------------------------------+-----------------------------------------|
   | 游戏服        | 1. ID登录                                     |                                         |
   |               | 2. 如果在房间中, 进入子游戏场景, 获取房间信息 | 获取房间信息, 只需要完成[100.1]系列消息 |
   |               | 3. 如果没有在房间中, 不处理                   |                                         |
   |---------------+-----------------------------------------------+-----------------------------------------|
   | 登录服        | 1. ID登录                                     |                                         |
   |---------------+-----------------------------------------------+-----------------------------------------|


   表2: 断线重连情形
   | 断线场景   | 哪个socket断线 | 重连情形   | 应该的处理事情                                                                  | 备注         |
   |------------+----------------+------------+---------------------------------------------------------------------------------+--------------|
   | login场景  | 登录服socket   | 关闭重开   | ID登录                                                                          |              |
   |------------+----------------+------------+---------------------------------------------------------------------------------+--------------|
   | login场景  |                |            |                                                                                 | 不存在此情形 |
   |------------+----------------+------------+---------------------------------------------------------------------------------+--------------|
   | Hall场景   | 登录服socket   | 关闭重开   | 登录服ID登录                                                                    |              |
   |------------+----------------+------------+---------------------------------------------------------------------------------+--------------|
   | Hall场景   | 登录服socket   | 后台切前台 | 登录服ID登录成功, 重复进入大厅场景, 需要处理                                    |              |
   |            |                |            | 登录服ID登录失败, 进入子游戏场景                                                |              |
   |------------+----------------+------------+---------------------------------------------------------------------------------+--------------|
   | Hall场景   | 游戏服socket   | 关闭重开   | 登录服ID登录成功, 回到Hall初始页面, 不做之前window页面恢复                      |              |
   |------------+----------------+------------+---------------------------------------------------------------------------------+--------------|
   | Hall场景   | 游戏服socket   | 后台切前台 | 游戏服ID登录                                                                    |              |
   |------------+----------------+------------+---------------------------------------------------------------------------------+--------------|
   | 子游戏场景 | 登录服scoket   | 关闭重开   | 登录服ID登录成功, 在房间中, 游戏服socket连接,ID登录,进入子游戏场景,请求房间信息 |              |
   |            |                |            | 登录服ID登录成功, 不在房间, 进入大厅场景                                        |              |
   |------------+----------------+------------+---------------------------------------------------------------------------------+--------------|
   | 子游戏场景 | 登录服socket   | 后台切前台 | 登录服ID登录失败, 回到登录场景                                                  |              |
   |            |                |            | 登录服ID登录成功, 在房间中, 不处理                                              |              |
   |            |                |            | 登录服ID登录成功, 不在房间, 进入大厅场景                                        |              |
   |------------+----------------+------------+---------------------------------------------------------------------------------+--------------|
   | 子游戏场景 | 游戏服socket   | 关闭重开   | 登录服ID登录成功, 在房间中, 游戏服socket链接,ID登录,进入子游戏场景,请求房间信息 |              |
   |            |                |            | 登录服ID登录成功, 不在房间, 进入大厅场景                                        |              |
   |------------+----------------+------------+---------------------------------------------------------------------------------+--------------|
   | 子游戏场景 | 游戏服socket   | 后台切前台 | 游戏服ID登录成功, 在房间中, 请求房间信息                                        |              |
   |            |                |            | 游戏服ID登录成功, 不在房间, 返回大厅                                            |              |
   |------------+----------------+------------+---------------------------------------------------------------------------------+--------------|

   表3: 业务流程
   | socket服务器 | 流程                       | 情形                                                    |
   |--------------+----------------------------+---------------------------------------------------------|
   | 登录服       | socket连接成功后, 自动登录 | 1. 登录失败, 则返回登录场景                             |
   |              |                            | 2. 登录成功, 如果在房间中(服务器判断), 则进入子游戏场景 |
   |              |                            | 3. 登录成功, 如果没在房间(服务器判断), 则进入大厅场景   |
   |--------------+----------------------------+---------------------------------------------------------|
   | 游戏服       | socket连接成功后, 自动登录 | 1. 登录失败, 提示错误                                   |
   |              |                            | 2. 登录成功, 则根据动作来具体判断 处理什么业务          |
   |--------------+----------------------------+---------------------------------------------------------|

   : 根据表1写表2, 根据表2写表3
** frame与子游戏热更分离
   1. frame热更 使用kindid =0
   2. 子游戏热更路径为kinid

   : frame 进入子游戏的时候, 会先判断子游戏是否需要热更, 如果需要进行热更, 否则不处理
** sub 开头的window 其层级为10, canvas, 其他均默认为0
