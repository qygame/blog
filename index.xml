<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>简介 on QYGame</title><link>https://qygame.github.io/blog/</link><description>Recent content in 简介 on QYGame</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 03 Aug 2024 16:55:49 +0000</lastBuildDate><atom:link href="https://qygame.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>BDFramework</title><link>https://qygame.github.io/blog/docs/client/sdk/bdframework/</link><pubDate>Thu, 01 Aug 2024 17:53:00 +0000</pubDate><guid>https://qygame.github.io/blog/docs/client/sdk/bdframework/</guid><description>client BDFramework # 框架ui学习 # ScereenView : IScereenView &amp;ndash; ScreenViewManager.Inst.MainLayer.BeginNavTo(ScreenViewEnum.Main); &amp;ndash; ui1 : AWindow &amp;ndash; UIManager.Inst.LoadWindow( WinEnum.Win_Demo1); &amp;ndash; ui2 &amp;ndash; UIManager.Inst.ShowWindow(WinEnum.Win_Demo1); &amp;ndash; button 根据[TransformPath(&amp;ldquo;Button&amp;rdquo;)] 直接获取 脚本学习 # 配置脚本 Config [代码路径], [sqlite路径], [资源路径] 之外, 其他暂时没用 title 说明 备注 代码路径 Sqlite路径 资源路径 s 配置到其他路径 资源路径 仅StreamAsset下生效 Code Run Mode 运行模式 Edit不生效 文件服务器 GameConfig的下载路径 GameConfig即Config配置文件 Gate服务器 无用 port 无用 是否热更 无用 是否联网 无用 本地配置 GameConfig本地配置路径 热更脚本 VersionContorller 步骤: BDtools -&amp;gt; 资源一键打包 -&amp;gt; 一键导出 DBtools -&amp;gt; 资源一键打包 -&amp;gt; 热更资源转Hash 找到{platform}Hash目录, 放到服务器, 并移除目录中的_Hash 记录改地址, 比如 https://sss.</description></item><item><title>注意事项</title><link>https://qygame.github.io/blog/docs/client/build/build/</link><pubDate>Thu, 01 Aug 2024 17:53:00 +0000</pubDate><guid>https://qygame.github.io/blog/docs/client/build/build/</guid><description> unity注意部分 # 修改ShareSDK社交平台列表 Assets/Plugins/ShareSDK/ShareSDKDevInfo.cs修改 ShareSDK认证 与 微信资质认证 修改后, 需要在unity场景中Reset一下ShareSDK.CS脚本 Assets/Plugins/Android/AndroidManifest.xml中修改 包名, ShareSDK认证, 微信回调包名 Unity Build-Setting中 替换logo Unity Build-Setting中 替换包名</description></item><item><title>unity</title><link>https://qygame.github.io/blog/docs/client/base/unity/</link><pubDate>Thu, 01 Aug 2024 17:52:00 +0000</pubDate><guid>https://qygame.github.io/blog/docs/client/base/unity/</guid><description> scene view 中 # 2个手指按压 2D移动; 3D旋转 2个手指滑动 缩放 alt+f 模拟game视图 ctrl 显示尺寸大小? 点击hierarcht中的物体, 按F 可以使视图居中在该物体 移动的物体 按 shitf+F可以锁定 hierarchy 中 # alt + 点击可以切换所有子child(递归) 的显示与隐藏 其他 # unity会完全忽略以 ~ 结尾的文件或目录</description></item><item><title>ShareSDK</title><link>https://qygame.github.io/blog/docs/client/sdk/sharesdk/</link><pubDate>Thu, 01 Aug 2024 17:54:00 +0000</pubDate><guid>https://qygame.github.io/blog/docs/client/sdk/sharesdk/</guid><description>shareSDK指导文档 # 基本说明 # shareSDK是第三方插件(如果把微信,QQ等比作第一方), 其集成了很多平台, 可以实现快速接入 操作步骤 # 在官网下载对应的SDK包 包里面有Android工程 和 U3D(如果sdk是针对u3d)工程 编译Android工程, 为自己的U3D工程添加插件 Android工程的编译目标是U3D的插件 在自己的U3D工程中 导入并修改官方的u3d Demo 完成 F&amp;amp;Q # 问: 官方的android工程打不开? 答: 根据不同的IDE, 有不同注意事项 Eclisp IDE的时候, compiler和jdk版本要匹配 Android stutio, 需要将工程import import 官方的android工程是Eclisp的, 需要转换 问: Android Stutio如何编译官方的android工程? 答: Android Stutio编译的时候需要有以下几个注意点 编译器gradlew版本 修改工程下gradle/wrapper/gradle-wrapper.properties文件中的distributionUrl版本为4.1 修改工程下build.gradle文件中的classpath版本为4.1 &amp;ndash; 只影响gradlew指令, 不修改也可以 app文件的taget从app改为android module 修改工程下app/built.gradle文件中的plugin为apply plugin: &amp;lsquo;com.android.library&amp;rsquo; 删除工程下app/built.gradle文件中的applicationId &amp;ndash; 仅当application才有 app文件的taget sdk版本修改 修改工程下app/built.gradle文件中的compileSdkVersion和targetSdkVersion为21 (与安装的sdk版本匹配) 修改工程下app/src/main/AndroidManifest.xml中的targetSdkVersion为21 以上的sdk版本 应当与u3d编译时的选项一致 app文件依赖性修改 修改工程下app/built.gradle文件中的dependence为implementation 具体原因, 详见Android Stutio的六种编译方式 包名的修改 修改工程下app/src/main/Androidmanifest.</description></item><item><title>Android</title><link>https://qygame.github.io/blog/docs/client/base/android/</link><pubDate>Thu, 01 Aug 2024 17:52:00 +0000</pubDate><guid>https://qygame.github.io/blog/docs/client/base/android/</guid><description> Java的一些基础 # Activity # Activity是 java中类的实例化 activity存在于一些堆栈中, 似于线程的操作 Activity必须在mainfest.xml中进行注册，才可以启动 oncreate &amp;ndash; onstart &amp;ndash; onresume &amp;ndash; stop activity有显示启动和隐式启动 AndroidMainFest.xml # 类似于activity管理器的配置文件 决定了哪个activity先启动， 决定了哪些activity可以启动 inter-filter决定了activity是否是main activity，也决定了activity在什么情形下可以隐式启动</description></item><item><title>环境搭建</title><link>https://qygame.github.io/blog/docs/client/env_init/</link><pubDate>Thu, 01 Aug 2024 17:15:00 +0000</pubDate><guid>https://qygame.github.io/blog/docs/client/env_init/</guid><description> 环境搭建 # unity 2019.4.40f1 Windows Build Support(IL2CPP) 或 Mac Build Support(IL2CPP): HyCLR需要 vs2019 使用Unityd的游戏开发 HyCLR需要 工程搭建 # [X] 表示工程中已完成 [ ] 需要手动处理 BDFrameWork package 导入Asset资源到工程 导入Odin插件 BDFramework工具箱/框架配置 (各种打包设置) HyCLR 菜单栏 HyCLR &amp;ndash; install *安装完之后, 需要重启unity去生成HyCLR Setting ShareSDK generate sln BDFramework build hotfix.dll需要 Preferences/External Tools/Regenerate project files 需要勾选Embedded packages, Local packages, Registry packages 注意事项 # 第一次构建的时候, il2cpp需要编译整个工程(?), 因此速度会很慢很慢(差不多30多分钟)</description></item><item><title>苹果打包流程</title><link>https://qygame.github.io/blog/docs/client/build/build_apple/</link><pubDate>Thu, 01 Aug 2024 17:53:00 +0000</pubDate><guid>https://qygame.github.io/blog/docs/client/build/build_apple/</guid><description>环境 # 工具 版本 备注 unity3d 2018.4.11c1 xcode 11.3 标ios 打包流程 # Unity工程 File→Build Setting平台切换至IOS Run in Xcode as 选择Release Player Seetings -&amp;gt; Splash Image -&amp;gt; Splash Screen -&amp;gt; Show Splash Screen去掉勾选(需要破解u3d) 点击player setting，选择other setting（其他的设置可以保持默认，splash image 加载背景如果需要的话自行替换） Target SDK选择Device SDK（真机），我这里只是通过编译，模拟器的坑还没去踩 打开Xcode，选择右下角的Open another Project，选择我们用Unity发布出来的Xcode工程并打开，或者双击打包好的工程的.xcodeproj文件，如果工程中没有SDK则需要手动添加最新SDK（操作：鼠标右键文件夹Unity-iPhone→Add Files to &amp;ldquo;Unity-iPhone&amp;rdquo;…​→选中SDK→Add），如果有则不需要添加 选择team TARGETS→Unity-iPhone→Signing &amp;amp; Capabilities→选择Team（使用已有ID登录） 修改Enable Bitcode TARGETS→Unity-iPhone→Build Settings-&amp;gt;build options-&amp;gt;Enable Bitcode修改为No 直接点击上方菜单栏Product → Build生成项目，successed 常见问题 # library not found for -lstdc.6.0.9 TARGETS-&amp;gt;Unity-iPhone-&amp;gt;Build Phases-&amp;gt;Link Binary with Libraries-&amp;gt;最底下+号-&amp;gt;添加libstdc++.</description></item><item><title>子游戏</title><link>https://qygame.github.io/blog/docs/client/subgame/</link><pubDate>Thu, 01 Aug 2024 17:23:00 +0000</pubDate><guid>https://qygame.github.io/blog/docs/client/subgame/</guid><description> client子游戏 # 子游戏需要继承 Iwindow_sub_player 玩家管理类, 并注册UI GWin_Sub_Player 子游戏需要继承 Isub_player 玩家信息类</description></item><item><title/><link>https://qygame.github.io/blog/posts/client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qygame.github.io/blog/posts/client/</guid><description>client # 脚本目录架构 # Scripts &amp;ndash; /Define 公共定义 &amp;ndash; &amp;ndash; GameRunTimeData.cs 保存了运行时候需要的数据, 比如UserInfo就是其的成员变量 &amp;ndash; &amp;ndash; GlobalConst.cs 保存了游戏中的常量 &amp;ndash; /Model 模块 &amp;ndash; /Net 网络 &amp;ndash; &amp;ndash; /NetLogic 网络具体事务处理 &amp;ndash; &amp;ndash; /NetSocket 网络底层服务 &amp;ndash; /UI &amp;ndash; &amp;ndash; /Surfaces &amp;ndash; &amp;ndash; /Login &amp;ndash; &amp;ndash; &amp;ndash; LoginTransfer.cs ui界面的总控制类， 其底下一般是各种btn的点击函数 &amp;ndash; &amp;ndash; &amp;ndash; BtnClick_Logon_Account.cs 账号登录按钮的 响应函数 &amp;ndash; /Utility 实用脚本， 可以理解为与系统相关的脚本 &amp;ndash; GameApp.cs Compontes目录下所有类的 管理类 断线重连 # 表1: socket断开, socket重新连接后, 需要完成的事情: socket 服务器 需求 备注 游戏服 1.</description></item><item><title/><link>https://qygame.github.io/blog/posts/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qygame.github.io/blog/posts/readme/</guid><description> 简介 # 休闲游戏模板, 包含服务器, 客户端, 数据库和监控系统. 服务器运行在docker容器,支持docker-compose与k8s两种安装方式. 使用C++开发. 客户端使用unity平台, 使用C#开发. 数据库使用redis, mysql. 监控系统采用prometheus + grafana. 安装 # 下载开发环境. 包含了数据库, 游戏运行环境, redis等 git clone git@github.com:qydocker/docker-compose.git &amp;amp;&amp;amp; cd docker-compose ./build.sh dev *下载监控 (可选) git clone git@github.com:qydocker/docker-compose.git &amp;amp;&amp;amp; cd docker-compose ./build monitor 下载执行文件 git clone --branch 1.0.0 git@github.com:qygame/svr-publish.git &amp;amp;&amp;amp; cd svr-publish ./server.sh start 游戏功能 # 登陆模块 - 重复登陆，断线重连. 登陆方式支持: 账号密码，游客，微信等 房间列表显示模块 房卡场 创建界面 金币场 列表展示 房间创建流程 子游戏模块 房间结束后， 信息统计 大局战绩 小局战绩 录像回放 财富修改记录 任务模块 排行榜 比赛场 活动模块 工会 源码仓库 # 详细介绍 源码设计文档 # 服务器架构介绍 服务器源码介绍 客户端介绍</description></item><item><title/><link>https://qygame.github.io/blog/posts/repository/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qygame.github.io/blog/posts/repository/</guid><description> 构建流程 # qydocker与qygame协同工作, 构建docker images. 具体流程如下图: qydocker # 管理docker image. 负责image构建与运行. 托管在qydocker organization 仓库名 作用 qydocker/build_image_dev 构建qygame base image qydocker/build_publish 编译qygame, 结果托管在qygame/svr-publish qydocker/build_image 构建qygame images qydocker/docker-compose 使用docker-compose管理qygame images qydocker/k8s 使用k8s管理qygame images qydocker/mirror_google_image google docker镜像映射到dockerhub, 加快访问速度 qygame # 管理游戏源码, 主要有server端代码, client代码, protocol协议, database. 托管在qygame organization 仓库名 作用 备注 qygame/svr-kernel 业务与基础库的适配层 qygame/svr-frame 业务层 依赖svr-kernel qygame/svr-subgames 子游戏 依赖svr-frame qygame/protocol client与server消息协议 qygame/client client qygame/database 数据库 qygame/svr-publish 以branch形式存放svr编译结果</description></item><item><title/><link>https://qygame.github.io/blog/posts/server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qygame.github.io/blog/posts/server/</guid><description>约定俗称 # 消息号命名规范 # 为了client与server的统一, 消息号统一使用驼峰式命名, exp: SubQueryGoldRooms 第一个字段 归属标志 可能的赋值 Sub C端向S端查询 Cmd S端返回给C端 L2G logon-&amp;gt;Game G2L game-&amp;gt;logon 只有Lgon, game间的消息号使用 LG字样, 其他全部是Sub, Cmd 第二个字段 意图 增删改查 第三个字段 对象 被op对象 &amp;ndash; 可以没有 第四个字段 消息号含义 结构体的命名为 消息号前面增加Str 函数的命名为 消息号前面增加On 玩家的桌子号 # player.tableid 含义: 玩家在哪个桌子上 用途: 登录的时候 判断断线重连 进入table时的校验, 防止加入2张桌子 状态变化: roomSvr table加入|坐下, 设置为桌子的tableid roomSvr table离开, 如果是比赛场,设置为MATCH_TABLE, 否则INVALID_TABLE matchSvr 报名成功, 设置为MATCH_TABLE matchSvr 取消报名, 设置为INVALID_TABLE 房间流程 # 创建房间 &amp;ndash; 门票检测, 房间规则显示 RoomServer处理 房间规则使用rule_arry结构体传送给客户端显示 加入房间 &amp;ndash; 门票检测 GameServer处理 门票检测时 也会进行游戏资格检测 房间规则在子游戏的显示 RoomServer frame处理 frame调用子游戏SubRuleDes()接口, 显示子游戏规则描述信息 玩家信息在子游戏的显示 RoomServer frame处理 玩家站起|坐下|准备|离开等动作, 会携带玩家信息, 发送给client client根据动作, 判断是绘制还是删除玩家 玩家财富变更后, LogonServer会通知client, 更改大厅的显示 如果在子游戏中, RoomServer frame会通知client, 更改子游戏的显示 即SubGame子游戏不再提供玩家分数相关信息给client 游戏开始|一小局后 &amp;ndash; 门票扣除 RoomServer frame处理 门票扣除信息 在RoomRuleCom中, 由GameServer生成 每小局游戏结束 &amp;ndash; 游戏小局结算 RoomServer frame处理 小局结算写分 战绩记录 录像回放 每局游戏结束后 &amp;ndash; 游戏资格检测 RoomServer frame处理 数据在RoomRuleCom中, 由GameServer提供, 由CenterServer实际处理 server-gate # logon # 重复登陆 # 在当前gateSvr中重复登陆 auto player = player_manager.</description></item><item><title/><link>https://qygame.github.io/blog/posts/server_view/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qygame.github.io/blog/posts/server_view/</guid><description> 服务器架构 # logic view # @startuml client -&amp;gt; gate : test @enduml implementation view # process view # deployment view # TODO 后期补充k8s部署下的 deployment view use case view # 服务器说明 # 服务器 说明 有状态 状态量 业务多线程 业务多线程原因 备注 center 路由 n n db 数据库代理 n y database操作耗时 gate 网关 y map[gid, uid] n 无业务逻辑 logon 登录 n n lobby 大厅 n n game 查询, 创建, 加入 房间 n n 加载了房卡场与金币场的配置文件 match 比赛场服务器 y match自身数据stage_index等 n match_manager有map&amp;lt;int,match&amp;gt; room 游戏房间的具体处理 y 房间数据 n rank 排行榜 y rank_manager有map&amp;lt;int,rank&amp;gt; n redis 维护redis数据 n n task 任务 y task_manager有map&amp;lt;int,task&amp;gt; n chat 聊天服务器 n n ready to write club 俱乐部服务器 n n ready to write client 模拟client测试 y ugmanager有map&amp;lt;gid,uid&amp;gt; n 什么时候使用业务多线程 当业务逻辑的处理时间耗时较久的时候, 使用业务多线程 业务多线程优点 是加快了速度 业务多线程缺点 编码复杂(增加了出错概率)</description></item></channel></rss>