<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on QYGame</title><link>https://qygame.github.io/blog/posts/</link><description>Recent content in Posts on QYGame</description><generator>Hugo</generator><language>en</language><atom:link href="https://qygame.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://qygame.github.io/blog/posts/client/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qygame.github.io/blog/posts/client/</guid><description>client # 脚本目录架构 # Scripts &amp;ndash; /Define 公共定义 &amp;ndash; &amp;ndash; GameRunTimeData.cs 保存了运行时候需要的数据, 比如UserInfo就是其的成员变量 &amp;ndash; &amp;ndash; GlobalConst.cs 保存了游戏中的常量 &amp;ndash; /Model 模块 &amp;ndash; /Net 网络 &amp;ndash; &amp;ndash; /NetLogic 网络具体事务处理 &amp;ndash; &amp;ndash; /NetSocket 网络底层服务 &amp;ndash; /UI &amp;ndash; &amp;ndash; /Surfaces &amp;ndash; &amp;ndash; /Login &amp;ndash; &amp;ndash; &amp;ndash; LoginTransfer.cs ui界面的总控制类， 其底下一般是各种btn的点击函数 &amp;ndash; &amp;ndash; &amp;ndash; BtnClick_Logon_Account.cs 账号登录按钮的 响应函数 &amp;ndash; /Utility 实用脚本， 可以理解为与系统相关的脚本 &amp;ndash; GameApp.cs Compontes目录下所有类的 管理类 断线重连 # 表1: socket断开, socket重新连接后, 需要完成的事情: socket 服务器 需求 备注 游戏服 1.</description></item><item><title/><link>https://qygame.github.io/blog/posts/readme/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qygame.github.io/blog/posts/readme/</guid><description> 简介 # 休闲游戏模板, 包含服务器, 客户端, 数据库和监控系统. 服务器运行在docker容器,支持docker-compose与k8s两种安装方式. 使用C++开发. 客户端使用unity平台, 使用C#开发. 数据库使用redis, mysql. 监控系统采用prometheus + grafana. 安装 # 下载开发环境. 包含了数据库, 游戏运行环境, redis等 git clone git@github.com:qydocker/docker-compose.git &amp;amp;&amp;amp; cd docker-compose ./build.sh dev *下载监控 (可选) git clone git@github.com:qydocker/docker-compose.git &amp;amp;&amp;amp; cd docker-compose ./build monitor 下载执行文件 git clone --branch 1.0.0 git@github.com:qygame/svr-publish.git &amp;amp;&amp;amp; cd svr-publish ./server.sh start 游戏功能 # 登陆模块 - 重复登陆，断线重连. 登陆方式支持: 账号密码，游客，微信等 房间列表显示模块 房卡场 创建界面 金币场 列表展示 房间创建流程 子游戏模块 房间结束后， 信息统计 大局战绩 小局战绩 录像回放 财富修改记录 任务模块 排行榜 比赛场 活动模块 工会 源码仓库 # 详细介绍 源码设计文档 # 服务器架构介绍 服务器源码介绍 客户端介绍</description></item><item><title/><link>https://qygame.github.io/blog/posts/repository/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qygame.github.io/blog/posts/repository/</guid><description> 构建流程 # qydocker与qygame协同工作, 构建docker images. 具体流程如下图: qydocker # 管理docker image. 负责image构建与运行. 托管在qydocker organization 仓库名 作用 qydocker/build_image_dev 构建qygame base image qydocker/build_publish 编译qygame, 结果托管在qygame/svr-publish qydocker/build_image 构建qygame images qydocker/docker-compose 使用docker-compose管理qygame images qydocker/k8s 使用k8s管理qygame images qydocker/mirror_google_image google docker镜像映射到dockerhub, 加快访问速度 qygame # 管理游戏源码, 主要有server端代码, client代码, protocol协议, database. 托管在qygame organization 仓库名 作用 备注 qygame/svr-kernel 业务与基础库的适配层 qygame/svr-frame 业务层 依赖svr-kernel qygame/svr-subgames 子游戏 依赖svr-frame qygame/protocol client与server消息协议 qygame/client client qygame/database 数据库 qygame/svr-publish 以branch形式存放svr编译结果</description></item><item><title/><link>https://qygame.github.io/blog/posts/server/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qygame.github.io/blog/posts/server/</guid><description>约定俗称 # 消息号命名规范 # 为了client与server的统一, 消息号统一使用驼峰式命名, exp: SubQueryGoldRooms 第一个字段 归属标志 可能的赋值 Sub C端向S端查询 Cmd S端返回给C端 L2G logon-&amp;gt;Game G2L game-&amp;gt;logon 只有Lgon, game间的消息号使用 LG字样, 其他全部是Sub, Cmd 第二个字段 意图 增删改查 第三个字段 对象 被op对象 &amp;ndash; 可以没有 第四个字段 消息号含义 结构体的命名为 消息号前面增加Str 函数的命名为 消息号前面增加On 玩家的桌子号 # player.tableid 含义: 玩家在哪个桌子上 用途: 登录的时候 判断断线重连 进入table时的校验, 防止加入2张桌子 状态变化: roomSvr table加入|坐下, 设置为桌子的tableid roomSvr table离开, 如果是比赛场,设置为MATCH_TABLE, 否则INVALID_TABLE matchSvr 报名成功, 设置为MATCH_TABLE matchSvr 取消报名, 设置为INVALID_TABLE 房间流程 # 创建房间 &amp;ndash; 门票检测, 房间规则显示 RoomServer处理 房间规则使用rule_arry结构体传送给客户端显示 加入房间 &amp;ndash; 门票检测 GameServer处理 门票检测时 也会进行游戏资格检测 房间规则在子游戏的显示 RoomServer frame处理 frame调用子游戏SubRuleDes()接口, 显示子游戏规则描述信息 玩家信息在子游戏的显示 RoomServer frame处理 玩家站起|坐下|准备|离开等动作, 会携带玩家信息, 发送给client client根据动作, 判断是绘制还是删除玩家 玩家财富变更后, LogonServer会通知client, 更改大厅的显示 如果在子游戏中, RoomServer frame会通知client, 更改子游戏的显示 即SubGame子游戏不再提供玩家分数相关信息给client 游戏开始|一小局后 &amp;ndash; 门票扣除 RoomServer frame处理 门票扣除信息 在RoomRuleCom中, 由GameServer生成 每小局游戏结束 &amp;ndash; 游戏小局结算 RoomServer frame处理 小局结算写分 战绩记录 录像回放 每局游戏结束后 &amp;ndash; 游戏资格检测 RoomServer frame处理 数据在RoomRuleCom中, 由GameServer提供, 由CenterServer实际处理 server-gate # logon # 重复登陆 # 在当前gateSvr中重复登陆 auto player = player_manager.</description></item><item><title/><link>https://qygame.github.io/blog/posts/server_view/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://qygame.github.io/blog/posts/server_view/</guid><description> 服务器架构 # logic view # @startuml client -&amp;gt; gate : test @enduml implementation view # process view # deployment view # TODO 后期补充k8s部署下的 deployment view use case view # 服务器说明 # 服务器 说明 有状态 状态量 业务多线程 业务多线程原因 备注 center 路由 n n db 数据库代理 n y database操作耗时 gate 网关 y map[gid, uid] n 无业务逻辑 logon 登录 n n lobby 大厅 n n game 查询, 创建, 加入 房间 n n 加载了房卡场与金币场的配置文件 match 比赛场服务器 y match自身数据stage_index等 n match_manager有map&amp;lt;int,match&amp;gt; room 游戏房间的具体处理 y 房间数据 n rank 排行榜 y rank_manager有map&amp;lt;int,rank&amp;gt; n redis 维护redis数据 n n task 任务 y task_manager有map&amp;lt;int,task&amp;gt; n chat 聊天服务器 n n ready to write club 俱乐部服务器 n n ready to write client 模拟client测试 y ugmanager有map&amp;lt;gid,uid&amp;gt; n 什么时候使用业务多线程 当业务逻辑的处理时间耗时较久的时候, 使用业务多线程 业务多线程优点 是加快了速度 业务多线程缺点 编码复杂(增加了出错概率)</description></item></channel></rss>