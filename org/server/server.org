#+OPTIONS: ^:nil
#+OPTIONS: \n:t

* 约定俗称
*** 消息号命名规范
    为了client与server的统一, 消息号统一使用驼峰式命名, exp: SubQueryGoldRooms
    - 第一个字段 归属标志
      可能的赋值
      1) Sub  C端向S端查询
      2) Cmd  S端返回给C端
      3) L2G  logon->Game
      4) G2L  game->logon
     : 只有Lgon, game间的消息号使用 LG字样, 其他全部是Sub, Cmd
    - 第二个字段 意图  增删改查
    - 第三个字段 对象  被op对象 -- 可以没有
    - 第四个字段 消息号含义

    结构体的命名为 消息号前面增加Str
    函数的命名为 消息号前面增加On

*** 玩家的桌子号
    player.tableid
    含义:
    玩家在哪个桌子上

    用途:
    1. 登录的时候 判断断线重连
    2. 进入table时的校验, 防止加入2张桌子

    状态变化:
    1. roomSvr  table加入|坐下, 设置为桌子的tableid
    2. roomSvr  table离开,      如果是比赛场,设置为MATCH_TABLE, 否则INVALID_TABLE
    3. matchSvr 报名成功,       设置为MATCH_TABLE
    4. matchSvr 取消报名,       设置为INVALID_TABLE

*** 房间流程
    1. [X] 创建房间 -- 门票检测, 房间规则显示
       : RoomServer处理
       : 房间规则使用rule_arry结构体传送给客户端显示
    2. [X] 加入房间 -- 门票检测
       : GameServer处理
       : 门票检测时 也会进行游戏资格检测
    3. [X] 房间规则在子游戏的显示
       : RoomServer frame处理
       : frame调用子游戏SubRuleDes()接口, 显示子游戏规则描述信息
    4. [X] 玩家信息在子游戏的显示
       : RoomServer frame处理
       : 玩家站起|坐下|准备|离开等动作, 会携带玩家信息, 发送给client
       : client根据动作, 判断是绘制还是删除玩家
       : 玩家财富变更后, LogonServer会通知client, 更改大厅的显示
       :                 如果在子游戏中, RoomServer frame会通知client, 更改子游戏的显示
       :                 即SubGame子游戏不再提供玩家分数相关信息给client
    5. [X] 游戏开始|一小局后 -- 门票扣除
       : RoomServer frame处理
       : 门票扣除信息 在RoomRuleCom中, 由GameServer生成
    6. [X] 每小局游戏结束 -- 游戏小局结算
       : RoomServer frame处理
       1) 小局结算写分
       2) 战绩记录
       3) 录像回放
    7. [X] 每局游戏结束后 -- 游戏资格检测
       : RoomServer frame处理
       : 数据在RoomRuleCom中, 由GameServer提供, 由CenterServer实际处理


* server-gate
** logon
*** 重复登陆
    *在当前gateSvr中重复登陆*
    auto player = player_manager.get(uid);
    player.gatesvr_session != player.current_session 就认为是重复登陆

    
    *在所有gateSvr中重复登陆*
    redis中存在 key=gate_$uid, val=gatesvrid
    redis.val != current_serverid 说明该uid正在其他gateSvr上. 认为重复登陆

    
    *重复登陆处理*
    在当前gateSvr中重复登陆, 可以直接关闭旧的连接
    在其他gateSvr中重复登陆, 需要通过 ?? 通知对应的gateSvr, 关闭玩家连接
*** 断线重连
    *判断依据*
    玩家登陆的时候, 
    redis中存在 key=room_$uid, val=roomsvrid
    gateSvr会向roomSvr确认玩家是否真的在roomSvr中,
    如果roomSvr返回在, 则认为玩家是断线重连
    
    *断线处理*
    1. gateSvr更新player的roomsvrid信息
    2. 通知client
** game
   房间信息查询
   数据来源于roomSvr. roomSvr连接成功之后, 会主动推送

*** 数据格式
    房卡场 -- 查询房间配置:
    file: cfg_fk.hh
    data: map<kindid, rule_arry>

    金币场 -- 查询金币场信息
    file: cfg_gold.hh
    data: map<kindid, vector<gold_msg>>
    
    roomSvr信息
    file: server_manager
    data:
    map<session, vec<kind+level>>
    map<vec<kind+level>, session>
    
    保留roomSvr的意义:
    如果roomSvr与gateSvr断开连接了, 那么就可以实时的更新3个data数据.
    保证client那边看到的永远是可用的服务器
   
** center
   路由clien <->roomSvr
   - client -> gate -> roomsvr
     依据<player, roomsvrid> <x_session, roomsvrid>路由
     不使用redis的room_$uid是因为redis承载量不够
   - roomsvr -> gate -> client
     依据<player, client_session>路由
   
   <player, roomsvrid> 在player_manager中维护
   1. 玩家登陆成功时候, 根据redis中room_$uid来确认
   2. 玩家在roomSvr中加入或退出的时候, roomSvr也会主动推送给gateSvr.

   <x_session, roomsvrid> 在server_manager中维护
   
*** 对外接口
    - SetRoomID(uid, roomsvrid)
          
** TODO server--match
*** 设计理念
    matchSvr负责维护 {uid, score} 排行,
    具体的数据是roomSvr通知的matchSvr

    match没有必要把同排行的人放到一个roomSvr, 因此不需要指定roomSvr
    
*** 组织架构
    #+BEGIN_EXAMPLE
      kind1  --  match-type 1  -- match 1 -- {对应一系列桌子}
                               -- ....
                               -- match N
             --  ....
             --  match-type N
      ....
      kind N
    #+END_EXAMPLE

*** 流程
    1. 玩家申请加入某个比赛场match_type, 如果没有空的match, 则创建一个match, 放入玩家
       设置其tableid为MATCH_TABLE, 防止进入其他桌子
       如果玩家取消比赛, tableid重置为INVALID_TABLE
       玩家掉线的时候, 如果还在比赛排队状态(tableid为MATCH_TABLE), 则按取消比赛处理
    2. 当match满足触发条件之后, 开始比赛
       matchSvr把玩家分组, 并通知roomSvr创建桌子
    3. roomSvr进行游戏, 当table大局结束的时候, 把数据(score)返回给matchSvr
    4. matchSvr进行排序, 重新分组, 继续通知roomSvr开始游戏
    5. 循环直至比赛结束为止
*** 依赖关系
    依赖GameSvr, 需要GameSvr提供的GetRoomRule()接口
*** 缺陷
    有状态的, 需要后期改为无状态服务器
*** 配置文件
    配置文件放在subgames/kinid/kindid.match中

** TODO server--rank
*** 对外接口
    - PushRank(ranktype, uid, score)
*** 配置文件
    *配置文件放在database rank表*
    | id   | rank_name | rank_desc | type           | sortid | award | valid    |
    | 自增 | 名字      | 描述      | 类型(唯一标志) | 优先级 | 奖励  | 是否开启 |

*** 定时功能的设计
    自定义定时操作
    缺点非常明显, 如果Svr挂了, 那么可能会导致数据错乱
    所以需要额外考虑svr挂掉的情况

** server--task
*** 对外接口
    - PushTask(task_type, uid, score)
*** 流程图
     #+BEGIN_EXAMPLE
      +--------+
      | start  |
      +--------+
          |
          |
          v
      +--------+  否
      | 触发   |------------+
      +--------+            |
        是|                 |
          |                 |
          v                 |
      +--------+  否        |
      |  完成  | -----+     |
      +--------+      |     |
          |           |     |
       是 |           |     |
          v           |     |
      +--------+      |     |
      | updata | <----+     |
      +--------+            |
          |                 |
      +---v----+            |
      | end    | <----------+
      +--------+
     #+END_EXAMPLE
     1. 触发条件判断
        - 时间start - end范围
        - 特定kind, 特定room_level下的任务.
          比如完成斗地主高级场一次
        - 用户身份的限定
          比如vip才可完成的任务
     2. 完成条件的判断
        1) 需要先根据周期重置来重置任务完成状况
        2) 任务完成状况与task配置中的任务step_all比较, 判断是否完成
     3. update
        更新任务完成状况
*** 配置文件 && 中间状态
    *配置文件放到database task表*
    | 名称 | 描述 | 类型 | 优先级   | 开始时间   | 结束时间 | 重置周期     | 其他触发限制 | 总步数   | 奖励配置 |
    | name | desc | type | priority | start_time | end_time | reset_period | on_xml       | step_all | award    |

    type解释,
    斗地主初级场1次, 斗地主初级场2次, 斗地主初级场3次
    那么他们的type可以一致, 并设置priority分别为1,2,3
    这样就可以认为这三个任务是阶段性任务. 先完成斗地主初级场1次后, 才会显示斗地主初级场2次;
    完成斗地主初级场2次后,才会显示斗地主初级场3次. 形成一个阶段

    所以type相同, 认为是同一种类型任务(触发流程, 完成流程都一致), 而priority可以区分其阶段.


    *中间状态放到redis task_status_$uid_$taskid表*
    | uid | 任务id | 当前步数     | 任务完成时间 | 任务状态 |
    | uid | taskid | step_current | time         | status   |

    time应该是任务完成的时间. 昨天完成的时间, 到了今天也会重置
    status 0 未完成, 1完成未领奖, 2完成已领奖
*** 任务类的设计
     1. Task
        - tagTask 任务配置的数据结构
        - 触发逻辑判断 task::bOn(...) 入参可能较多
        - 完成逻辑判断 task::bComplete(tagTaskStatus)
     2. TaskManager
        - map<taskid, Task>
        - 更新逻辑 TaskManager::updata()
        - 获取不同mtype(或sub_type)的任务
        - 增加, 删除任务
          
* server--db
  通过MySQL Connector/C++ 连接mysql

** 对外接口
   - void init()
     创建work线程数量的db
   - shared_ptr<db> get_db()
     通过shared_ptr自带的计数use_count来确认db是否可用
     mysql官方资料显示, mysqlx::Session非多线程安全.
   
** 参考资料
   [[https://dev.mysql.com/doc/x-devapi-userguide/en/collections-as-relational-tables.html][官方用例]]
   [[https://dev.mysql.com/doc/dev/connector-cpp/latest/group__devapi.html][API接口]]


* server--room
** 对外接口
   - GetTable       获取table状态信息
   - GetTableUser   获取玩家是否在桌子上
   - EnterTable(uid, tableid)               进入桌子
   - EnterTable(uid, tagRoomrule)           进入桌子
   - EnterTable(vector<uid>, tagRoomrule)   进入桌子
** table设计思路
   roomSvr中的table是最基本的table, 不考虑金币场, 比赛场, 俱乐部
   只处理游戏逻辑

   也就是说, 这里Table不区分房卡场, 金币场等
   对自身影响范围:
   1. [X] 门票的问题
      门票无需特意处理, 因为在创建房间之前, 门票就已经算清楚了
   2. [X] 算分的问题
      只是把结果放出来, 至于具体如何处理, table可以不需要关心

** 战绩 && 录像回放
*** 查询
    数据存放在database中
    player_score 战绩-玩家信息
    table_record 战绩-桌子信息
    table_video  录像回放

    模拟运行:
    1. 查看大局战绩
       : player_score与table_record联查, onlyid为连接标志
       : 根据player_score.userid 与 table_record.clubid 找出top 100的onlyid
       : 根据onlyid和curcount=0 在player_score中查找所有符合条件的数据
       : 最后联查player, 联查标记为userid
    2. 查看小局战绩
       : 根据onlyid 在player_score查找即可
       : 最后联查player, 联查标志位userid
    3. 查看录像回放
       : 根据onlyid, curcount 在table_video中查找即可

*** 录像回放 写入
    1. RoomServer frmae中处理, 子游戏不需要考虑
    2. frame的SendTable()函数中, 调用录像类记录
    3. 在小局结束的时候, 调用录像类获取数据
       : 这里的数据是proto序列化为string后, 又转为了raw-string, 方便写入数据库
    4. 数据库读取出raw-string, 转为string, 再转为录像数据table_video结构体
    5. 子游戏只需要解析table_video即可

** 小局结束 数据处理
   1. [X] 玩家 门票
   2. [X] 玩家 财富变更
   3. [X] 玩家 具体输赢情况
   4. [X] 玩家 任务系统
   5. [X] 桌子 战绩
   6. [X] 桌子 回放


   财富变更表 -- 比较独立的表格 player_log_treasure
   | 玩家id | 财富类型 | 财富数量 | 备注说明 | 插入时间 |
   |--------+----------+----------+----------+----------|

   玩家输赢情况表 player_score
   | 玩家id | 当前桌子局数 | 椅子位置 | 分数 | 大赢家标志 | 唯一标志 | 插入时间 |
   |--------+--------------+----------+------+------------+----------+----------|

   战绩表 table_record
   | 桌子ID | 桌子类型(房卡, 金币) | 总局数 | 桌子玩家数 | KindID | clubid | 子游戏信息 | 唯一标志 | 插入时间 |
   |--------+----------------------+--------+------------+--------+--------+------------+----------+----------|

   战绩回放表 table_video
   | 当前桌子局数 | 回放数据 | 唯一标志 | 插入时间 |
   |--------------+----------+----------+----------|

   备注说明:
   1. 玩家财富变更均通过 玩家财富变更记录表 -- 所有财富类型
   2. 战绩表 只 记录桌子信息, 而不记录 玩家输赢信息

** 玩家动作 坐下|起立|离开|解散|换桌(金币场)
   玩家加入
   玩家坐下
   玩家起立
   玩家离开
   金币换桌
*** 旁观的处理
    : 是否旁观是由服务器根据桌子状态来判断的
    玩家加入房间的时候
    如果房间已经开始&&允许旁观, 则可以设置为旁观状态
    如果房间没有开始, 则是坐下状态

** 玩家状态
   状态1 UserStatusL
   状态2 UserStatusH
   : 两者非互斥关系, UsetStatusL内部为互斥关系, UserStatusH内部为互斥关系
   : 掉线之后未必为托管状态, 掉线8s之后, 将由掉线状态变为托管状态; 当掉线回来后, 托管状态自动取消

   #+BEGIN_EXAMPLE c++
//用户状态 low
enum UserStatusL
{
   FREE_L=0;      //没有状态
   SIT = 1;       //坐下
   STANDUP =2;    //站立(旁观)
   READY= 3;      //准备状态
   PLAYING=4;     //游戏中
};
//用户状态 high 与low不互斥
enum UserStatusH
{
   FREE_H =0;     //正常状态
   TUOGUAN =1;    //托管
   OFFLINE=2;     //掉线 -- 掉线8s之后设置为托管状态
};
   #+END_EXAMPLE

** 椅子视图
   唯一视图 真实的椅子位置
   frame: m_player_list与真实椅子视图 是通过CPlayer来转换的
   subgame: subgame实现了真实的椅子视图
   client: client存在C视图 与 真实椅子视图(S视图)的转换

** tableid生成方式
   table 由redis启动的时候预先生成100000-999999
   table_using使用zset记录tableid, 创建time. 后面删除的时候, 根据time来有选择的删除,
   比如删除5分钟之前的桌子, 提高效率.
   
** 房间配置加载
   加载子游戏的fk, gold, match信息
*** 配置文件
    配置文件放在
    kindid/cfg/kindid.fk
    kindid/cfg/kindid.gold
    kindid/cfg/kindid.match
*** 房间规则配置
**** 房间规则分析
     *房间规则由来*
     对于每一个具体的游戏来讲, 游戏本身是规则下的流程
     这里的规则分为两大类
     一类是游戏自身的规则, 比如斗地主需要一副牌, 有三带一等各种牌型.
     这种规则本身变化不大, 影响的是游戏自身的流程.
     还有一类规则是影响游戏逻辑之外的, 比如3小局, 4小局. 比如这是房卡场的, 金币场的等等

     于是我们把所有游戏共用的规则(主要是第二类规则), 提取出来放到tagRoomRuleCom
     而对于每个子游戏不同的游戏规则, 我们只需要提供map<key, choose_index>给子游戏即可

     房间规则不区分游戏玩法.
     房卡场, 金币场, 比赛场, 俱乐部玩法的房间规则使用同一个结构体tagRoomRule
     通用房间规则 是指抽象出来供frame使用的, 使用统一结构体tagRoomRuleCom
     子游戏规则   是每个子游戏自身的规则, 在frame层以map<key, choose_index>的形式传递给子游戏, 由子游戏自己解析


     *房间规则继续分析*
     无论对于tagRoomRuleCom 还是map<key, choose_index> 都可以认为是key, value的键值对
     所以我们配置文件, 可以采取最基本的key, value形式.
     但是考虑到房卡场, 金币场等具体玩法, 我们期待的金币场也可以配置自身的游戏规则.
     比如初级场可以配置为3小局, 底分2; 中级场可以配置为2小局, 底分5;
     因此可以再进一步抽象为
     1. 先提供一个可供选择的规则配置
     2. 需要什么样的规则, 只要提供对应的choose, 就可以生成具体的tagRoomRule

**** 房间规则配置
     *目标*
     1. 金币场, 比赛场, 俱乐部模式 更好的配置游戏规则
     2. 对于房卡场, 服务器控制client的房间规则显示
        client开发的时候 不需要做任何处理


     *client使用流程*
     1. client申请创建房间
     2. server判断是否符合创建条件,  发送房间规则配置 rule_arry(在STR_Game.proto中)
        其中css控制client显示的样式
        rule表示一条规则
        #+BEGIN_EXAMPLE sh 配置举例
        css
        1
        2
        特殊规则 3, 4, 5

        rule_1  人数
        rule_2  局数
        rule_3  炸弹
        rule_4  鬼子
        rule_5  天王九
        #+END_EXAMPLE
        #+BEGIN_EXAMPLE sh client显示的样式
        人    数   "2" "3" "4"
        局    数   "2" "3" "4"
        特殊规则   炸弹o  鬼子o 天王九o
        #+END_EXAMPLE
     3. client返回 选择结果 repeated int32
        比如: 上面选择了 2人 4局, 则返回
        0
        2
        每个返回字段为byte, 返回的value index
     4. server收到后, 构造房间规则tagRoomRule


     *其他游戏模式使用流程*
     对于金币场,比赛场等使用更加简单, 直接提供choose_values即可

* server--子游戏
  1. 子游戏处理范围
     游戏开始 -- 大局结束
  2. 子游戏不涉及到玩家的财富
     只会通知frame增减财富
     client子游戏玩家财富信息的显示, 实际由frame控制, 而非子游戏

** 组织架构
   FrameWork -->  TableFrameSink --> GameData

   备注: 1. tableFrameSink只是处理流程, 所有的数据都在GameData中
   2. CGameCardConfig 是GameData的辅助类.

** 牌类数据描述
   玩家 使用16位表示
   高四位 表示 玩家类型的ID  -- 比如 地主, 农民
   再四位 表示 玩家数量
   低8位  表示 玩家手牌数量


   牌使用16位表示
   高四位  表示 卡牌点数
   中四位  表示 卡牌颜色
   低8位   表示 卡牌类型组 -- groupID, 配置文件挂钩

   1方块; 2梅花; 3红桃; 4黑桃; 5表示特殊牌,  比如大王小王
   大王小王 花色为5， 值分别为 15 14

** protobuf结构
   1. 消息号
   2. 游戏状态 (抢庄, 下注, 发牌 ....) -- 断线重连相关
   3. 自定义enum, 比如牌型, 定时器等
   4. 消息号对应的结构体
   5. 断线重连对应的结构体 -- 与游戏状态一一对应
   6. 战绩中 显示的子游戏信息


* redis
** 已使用字段
   | 含义           | key                      | val                 | val_type_in_redis | 场景                                            | 备注       |
   |----------------+--------------------------+---------------------+-------------------+-------------------------------------------------+------------|
   | 玩家信息       | player_$uid              | tagUserInfo         | string            | 数据库与svr缓存                                 | 暂时未使用 |
   |----------------+--------------------------+---------------------+-------------------+-------------------------------------------------+------------|
   | 排行榜         | rank_$rankid             | zset<uid,score>     | ordered_set       | rank data                                       |            |
   |----------------+--------------------------+---------------------+-------------------+-------------------------------------------------+------------|
   | 排行榜过期时间 | rank_$rankid_expire      | int64_t             | string            |                                                 | 毫秒       |
   |----------------+--------------------------+---------------------+-------------------+-------------------------------------------------+------------|
   | 玩家任务状态   | task_status_$uid_$taskid | tagTaskstatus       | string            | task data                                       |            |
   |----------------+--------------------------+---------------------+-------------------+-------------------------------------------------+------------|
   | uggr索引       | gate_$uid                | gatesvr_id          | string            | uid在哪个gateSvr                                | 不含机器人 |
   |                |                          |                     |                   | 玩家在多个gateSvr重复登陆时候, 校验             | 暂时未使用 |
   |----------------+--------------------------+---------------------+-------------------+-------------------------------------------------+------------|
   | uggr索引       | room_$uid                | roomsvr_id          | string            | uid在哪个roomSvr                                | 不含机器人 |
   |                |                          |                     |                   | 只在uid登陆gate时候, gate用来记录map<uid, room> |            |
   |                |                          |                     |                   | 后续map<uid, room> 通过roomSvr主动通知gate      |            |
   |----------------+--------------------------+---------------------+-------------------+-------------------------------------------------+------------|
   | 可用桌子号     | table                    | set<tableid>        | unordered_set     |                                                 |            |
   |----------------+--------------------------+---------------------+-------------------+-------------------------------------------------+------------|
   | 已用桌子号     | table_using              | zset<tableid, time> | unordered_set     |                                                 |            |
   |----------------+--------------------------+---------------------+-------------------+-------------------------------------------------+------------|
   | 已用桌子号     | table_using_$tableid     | $severid_$kindid    | string            | gateSvr用来查询tableid在哪个server上面          |            |
   |----------------+--------------------------+---------------------+-------------------+-------------------------------------------------+------------|
** 已使用lock字段
   | 含义         | key              | 备注                 |
   |--------------+------------------+----------------------|
   | 玩家信息锁   | lock_player_$uid |                      |
   |--------------+------------------+----------------------|


* TODO server--redis
  redis 控制服务
  1. 初始化redis
  2. redis中机器人对回收等
   
